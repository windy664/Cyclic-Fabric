plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
	maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
	maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" } // DevAuth
	maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config Port
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
	maven { url = "https://api.modrinth.com/maven" } // Forge Config Screens
	maven { url = "https://jitpack.io" } // Forge Event API
	maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib
	maven { url = "https://maven.shedaniel.me/" } // REI
	maven { url = "https://maven.terraformersmc.com/" } // ModMenu, EMI
	maven { url = "https://modmaven.dev/" } // JEI
}

loom {
    runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagenClient {
			client()
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=cyclic"
 
			runDir "build/datagen"
		}
	}

	accessWidenerPath = file("src/main/resources/cyclic.accesswidener")
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

dependencies {
	//// Fabric Setup
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(loom.layered {
		it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	//// Dev env tweaks
	modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"
	//modRuntimeOnly "me.djtheredstoner:DevAuth-fabric:${project.devauth_version}"
	modImplementation "maven.modrinth:5WeWGLoJ:v8.0.2-1.20.1-Fabric"

	//// Recipe Viewers
	// JEI
	modCompileOnly("mezz.jei:jei-$minecraft_version-fabric:$jei_version") { transitive = false }
	// EMI
	modCompileOnly("dev.emi:emi-fabric:${emi_version}:api") { transitive = false }
	// REI
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version")
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version")

	switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
		case "jei": modLocalRuntime("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
		case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
		case "emi": modLocalRuntime("dev.emi:emi-fabric:$emi_version"); break
		case "disabled": break
		default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
	}

	//// Actual mod dependencies
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${project.portinglib_version}"))
	modApi("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${project.forgeconfig_version}")
	modApi(include("com.jamieswhiteshirt:reach-entity-attributes:${project.reachentityattributes_version}"))
	modApi(include("teamreborn:energy:${project.teamreborn_energy}")) { transitive = false }
	//modApi(include("com.github.knownsh:forgeeventapi:${project.forgeeventapi_version}"))
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.1")))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}